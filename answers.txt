
Question 1: What is the link to your github repository for this lab?
https://github.com/gengyuanhuang/cmput404_lab4

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
It show a webpage says "The install worked successfully!Congratualation"

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
"/" navigate to 404 page not found
"/polls/" navigate to a page says "hello world. you are at the polls index"

Question 4: What is a Django migration and why do we need them?
Django migration will propagate changes user made to models to database schema.
After we created two models - Question and Choice and run ./manage.py migrate, Django created two tables in the sqlite3 database.
We need them, cause it simplified our job as a programmer to write database query code in order to use database.

Question 5: What do you see after you log into the Django adminstration site? From a high levle, how do you get custom models to appear in the Django admin page?
A page that has a title of "Djanmgo administration".
It allows us to manage database entries to our polls app. Also, allows us to manage group and users. 

Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?
"/polls/38/" displays a page says "You're looking at question 38."
"/polls/38/results/" displays a page says "You're looking at the results of question 38."
if im using a string, the django responds with 404 page not found. It says it tried all teh URL patterns but the current path didnt match any of these
To allow arbitrary alphabetic characters, we can use <string> instead of <int>

Question 7: Why is it a bad idea to hardcode urls into the templates?
We have already defined url in url.py, if we hardcode urls into the templates, then we are repeating something we already did.
Moreover, the code will become harder to maintain, and easier to break. if i made change to url in one file and forget to change it in another file, then it can break the code.

Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?
It greatly reduce the work we need to do. We dont need to code every detail by ourselves.
The code becomes eaiser to maintain as generic view is standarded and documentated.

